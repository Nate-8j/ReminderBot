from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder


def reminder_type():
    menu = InlineKeyboardBuilder()
    menu.row(InlineKeyboardButton(
        text="—Ä–∞–∑–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ".encode("utf-8").decode("utf-8"),
        callback_data="one"
    ))
    menu.row(InlineKeyboardButton(
        text="—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ".encode("utf-8").decode("utf-8"),
        callback_data="regular"
    ))
    menu.row(InlineKeyboardButton(
        text="–∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ".encode("utf-8").decode("utf-8"),
        callback_data="interval"
    ))
    return menu.as_markup()


def choose_hour(call):
    hours = InlineKeyboardBuilder()
    for hour in range(24):
        hours.button(text=f"{hour:02d}", callback_data=f"{call}_{hour:02d}")
    hours.adjust(6)
    return hours.as_markup()


def choose_minute(call):
    minutes = InlineKeyboardBuilder()
    for minute in range(0, 60, 5):
        minutes.button(text=f"{minute:02d}", callback_data=f"{call}_{minute:02d}")
    minutes.adjust(6)
    return minutes.as_markup()


def type_regular_reminders():
    types = InlineKeyboardBuilder()
    types.row(InlineKeyboardButton(
        text='–µ–∂–µ–¥–Ω–µ–≤–Ω–æ',
        callback_data="regular_day"
    ))
    types.row(InlineKeyboardButton(
        text='–µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ',
        callback_data="regular_week"
    ))
    types.row(InlineKeyboardButton(
        text='–µ–∂–µ–º–µ—Å—è—á–Ω–æ',
        callback_data="regular_month"
    ))
    types.row(InlineKeyboardButton(
        text='–µ–∂–µ–≥–æ–¥–Ω–æ',
        callback_data="regular_year"
    ))
    return types.as_markup()


def day_week(selected_days: set):
    kb = InlineKeyboardBuilder()

    days = ["–ø–Ω", "–≤—Ç", "—Å—Ä", "—á—Ç", "–ø—Ç", "—Å–±", "–≤—Å"]
    for i, day in enumerate(days):
        text = f"‚úÖ {day}" if selected_days and i in selected_days else day
        kb.button(text=text, callback_data=f"week-day_{i}")

    kb.adjust(4)

    if selected_days:
        kb.row(InlineKeyboardButton(text="‚û°Ô∏è –î–∞–ª—å—à–µ", callback_data="farther"))

    return kb.as_markup()


def day_of_month(tot):
    month = InlineKeyboardBuilder()

    if tot:
        for i in range(1, tot + 1):
            month.button(text=f"{i}", callback_data=f"day_{i}")
        month.adjust(7)
        return month.as_markup()

    for i in range(1, 29):
        month.button(text=f"{i}", callback_data=f"day_{i}")
    month.adjust(7)

    month.row(InlineKeyboardButton(
        text="–ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å",
        callback_data="day_last"
    ))

    return month.as_markup()


def choosing_month():
    month_names = [
        "—è–Ω–≤–∞—Ä—å", "—Ñ–µ–≤—Ä–∞–ª—å", "–º–∞—Ä—Ç", "–∞–ø—Ä–µ–ª—å", "–º–∞–π", "–∏—é–Ω—å",
        "–∏—é–ª—å", "–∞–≤–≥—É—Å—Ç", "—Å–µ–Ω—Ç—è–±—Ä—å", "–æ–∫—Ç—è–±—Ä—å", "–Ω–æ—è–±—Ä—å", "–¥–µ–∫–∞–±—Ä—å"
    ]

    kb = InlineKeyboardBuilder()

    for i, name in enumerate(month_names, start=1):
        kb.button(text=name, callback_data=f"month_{i}")

    kb.adjust(4)
    return kb.as_markup()


def delete_reminder():
    kb = InlineKeyboardBuilder()
    kb.row(InlineKeyboardButton(text="üóë —É–¥–∞–ª–∏—Ç—å", callback_data="remove_remind"))

    return kb.as_markup()
